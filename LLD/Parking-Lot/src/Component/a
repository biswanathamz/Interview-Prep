package Component;
import Enum.VehicleType;

public class Bike extends Vehicle{
    public Bike(String licensePlate){
        super(licensePlate, VehicleType.BIKE);
    }
}

package Component;
import Enum.VehicleType;

public class Car extends Vehicle{
    public Car (String licensePlate){
        super(licensePlate,VehicleType.CAR);
    }
}

package Component;

import java.util.ArrayList;
import java.util.List;

import DTO.BookingSlip;
import Enum.VehicleType;


public class Floor {
    public int levelNumber;
    public int levelNumberOfBikeSpot;
    public int levelNumberOfCarSpot;
    public int levelNumberOfTruckSpot;
    protected List<Spot> spotListCar;
    protected List<Spot> spotListBike;
    protected List<Spot> spotListTruck;
    public Floor(int levelNumber, int levelNumberOfBikeSpot, int levelNumberOfCarSpot, int levelNumberOfTruckSpot){
        this.levelNumber = levelNumber;
        this.levelNumberOfBikeSpot = levelNumberOfBikeSpot;
        this.levelNumberOfCarSpot = levelNumberOfCarSpot;
        this.levelNumberOfTruckSpot = levelNumberOfTruckSpot;
        this.spotListCar = new ArrayList<>();
        this.spotListBike = new ArrayList<>();
        this.spotListTruck = new ArrayList<>();
        for(int i=0;i<this.levelNumberOfBikeSpot;i++){
            Spot spot = new Spot(VehicleType.BIKE,i+1);
            spotListCar.add(spot);
        }
        for(int i=0;i<this.levelNumberOfCarSpot;i++){
            Spot spot = new Spot(VehicleType.CAR,i+1);
            spotListBike.add(spot);
        }
        for(int i=0;i<this.levelNumberOfTruckSpot;i++){
            Spot spot = new Spot(VehicleType.TRUCK,i+1);
            spotListTruck.add(spot);
        }
    }
    public BookingSlip bookSpot(Vehicle vehicle){
        BookingSlip bookingSlip = new BookingSlip();
        List<Spot> varList = null;
        switch (vehicle.vehicleType){
            case CAR:
                varList = this.spotListCar;
                break;
            case BIKE:
                varList = this.spotListBike;
                break;
            case TRUCK:
                varList = this.spotListTruck;
                break;
            default:
                break;
        }
        for (Spot spot : varList){
            if(spot.isAvailable){
                bookingSlip.setSpotNumber(spot.bookSpot());
                bookingSlip.setLevelNumber(this.levelNumber);
            }
        }
        return bookingSlip;
    }
}

package Component;

import DTO.BookingSlip;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class ParkingLot {
    int noOfFloor= 0;
    Scanner scanner = new Scanner(System.in);
    List<Floor> floorList = new ArrayList<>();

    public ParkingLot(){
    }

    public void createParkingLot(){
        System.out.println("Please Enter the Number Of Floors : ");
        try{
            this.noOfFloor = Integer.parseInt(scanner.nextLine());
        }catch (NumberFormatException e){
            System.out.println("Please enter correct option!");
            createParkingLot();
        }
        for(int i=0; i<this.noOfFloor; i++){
            System.out.println("Please enter the number of CAR slot for leavel : "+(i+1));
            int numberOfSlotForCar = scanner.nextInt();
            System.out.println("Please enter the number of Bike slot for leavel : "+(i+1));
            int numberOfSlotForBike = scanner.nextInt();
            System.out.println("Please enter the number of Truck slot for leavel : "+(i+1));
            int numberOfSlotForTruck = scanner.nextInt();
            Floor floor = new Floor((i+1),numberOfSlotForCar,numberOfSlotForBike,numberOfSlotForTruck);
            this.floorList.add(floor);
        }
    }

    public void bookSlot(){
        System.out.println("Please enter 1 for CAR, 2 for Bike, 3 for Truck");
        int vehicleInput = scanner.nextInt();
        System.out.println("Please enter the numberplate details");
        String numberPlateNumber = String.valueOf(scanner.nextInt());
        Vehicle vehicle = switch (vehicleInput) {
            case 1 -> new Car(numberPlateNumber);
            case 2 -> new Bike(numberPlateNumber);
            case 3 -> new Truck(numberPlateNumber);
            default -> null;
        };
        for(Floor floor : floorList){
            assert vehicle != null;
            BookingSlip bookingSlip = floor.bookSpot(vehicle);
            if(bookingSlip.getLevelNumber()==floor.levelNumber){
                System.out.println("You got the spot for parking level : "+bookingSlip.getLevelNumber()+" and spot : "+bookingSlip.getSpotNumber());
                return;
            }
        }
        System.out.println("Not Slot available, Sorry!");
    }
}

package Component;
import Enum.VehicleType;

public class Spot {
    public boolean isAvailable;
    public VehicleType vehicleType;
    public int id;
    public Spot(VehicleType vehicleType, int id){
        isAvailable = true;
        this.vehicleType = vehicleType;
        this.id = id;
    }

    public int bookSpot(){
        if(this.isAvailable){
            isAvailable = false;
        }
        return this.id;
    }
     public boolean releaseSpot(){
        isAvailable=true;
        return true;
     }
}

package Component;
import Enum.VehicleType;

public class Truck extends Vehicle{
    public Truck(String licensePlate){
        super(licensePlate,VehicleType.TRUCK);
    }
}

package Component;
import Enum.VehicleType;


public class Vehicle {
    protected String licensePlate;
    protected VehicleType vehicleType;
    public Vehicle(String licensePlate, VehicleType vehicleType){
        this.licensePlate = licensePlate;
        this.vehicleType = vehicleType;
    }
    public VehicleType getType(){
        return this.vehicleType;
    }
}

package DTO;

import lombok.Data;

@Data
public class BookingSlip {
    private int levelNumber;
    private int spotNumber;
}

package Enum;

public enum VehicleType{
    CAR,
    BIKE,
    TRUCK
}

import Component.ParkingLot;

import java.util.Scanner;

public class Main {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        ParkingLot parkingLot = new ParkingLot();
        parkingLot.createParkingLot();
        while (true){
            System.out.println("Please enter 1 to book slot for parking!");
            System.out.println("Please enter 2 to release slot for parking!");
            int input = scanner.nextInt();
            switch (input){
                case 1:
                    parkingLot.bookSlot();
                    break;
                default:
                    break;
            }
        }
    }
}